import 'package:accumulate_api/src/protocol/encoding.dart';
import 'package:accumulate_api/src/protocol/enums.dart';

// DO NOT EDIT. Generated by generate-sdk.sh.

abstract class Signature extends Marshallable {
  int type();
}

abstract class TransactionPayload extends Marshallable {
  int type();
}

class AddCredits extends TransactionPayload {
  AddCredits({required this.recipient, required this.amount, });
  
  String recipient;
  int amount;
  
  int type() {
    return TransactionType.AddCredits;
  }
  
  List<int> marshalBinary() {
    var writer = ProtocolWriter();
    writer.writeUint(1, this.type());
    writer.writeString(2, this.recipient);
    writer.writeUint(3, this.amount);
    return writer.msg;
  }
}

class BurnTokens extends TransactionPayload {
  BurnTokens({required this.amount, });
  
  BigInt amount;
  
  int type() {
    return TransactionType.BurnTokens;
  }
  
  List<int> marshalBinary() {
    var writer = ProtocolWriter();
    writer.writeUint(1, this.type());
    writer.writeBigInt(2, this.amount);
    return writer.msg;
  }
}

class CreateDataAccount extends TransactionPayload {
  CreateDataAccount({required this.url, this.keyBookUrl, this.managerKeyBookUrl, this.scratch, });
  
  String url;
  String? keyBookUrl;
  String? managerKeyBookUrl;
  bool? scratch;
  
  int type() {
    return TransactionType.CreateDataAccount;
  }
  
  List<int> marshalBinary() {
    var writer = ProtocolWriter();
    writer.writeUint(1, this.type());
    writer.writeString(2, this.url);
    writer.writeString(3, this.keyBookUrl);
    writer.writeString(4, this.managerKeyBookUrl);
    writer.writeBool(5, this.scratch);
    return writer.msg;
  }
}

class CreateIdentity extends TransactionPayload {
  CreateIdentity({required this.url, required this.publicKey, this.keyBookName, this.keyPageName, this.manager, });
  
  String url;
  String publicKey;
  String? keyBookName;
  String? keyPageName;
  String? manager;
  
  int type() {
    return TransactionType.CreateIdentity;
  }
  
  List<int> marshalBinary() {
    var writer = ProtocolWriter();
    writer.writeUint(1, this.type());
    writer.writeString(2, this.url);
    writer.writeBytes(3, this.publicKey);
    writer.writeString(4, this.keyBookName);
    writer.writeString(5, this.keyPageName);
    writer.writeString(6, this.manager);
    return writer.msg;
  }
}

class CreateKeyBook extends TransactionPayload {
  CreateKeyBook({required this.url, required this.pages, this.manager, });
  
  String url;
  List<String> pages;
  String? manager;
  
  int type() {
    return TransactionType.CreateKeyBook;
  }
  
  List<int> marshalBinary() {
    var writer = ProtocolWriter();
    writer.writeUint(1, this.type());
    writer.writeString(2, this.url);
    this.pages.forEach((var value) => writer.writeString(3, value));
    writer.writeString(4, this.manager);
    return writer.msg;
  }
}

class CreateKeyPage extends TransactionPayload {
  CreateKeyPage({required this.url, required this.keys, this.manager, });
  
  String url;
  List<KeySpecParams> keys;
  String? manager;
  
  int type() {
    return TransactionType.CreateKeyPage;
  }
  
  List<int> marshalBinary() {
    var writer = ProtocolWriter();
    writer.writeUint(1, this.type());
    writer.writeString(2, this.url);
    this.keys.forEach((var value) => writer.writeValue(3, value));
    writer.writeString(4, this.manager);
    return writer.msg;
  }
}

class CreateToken extends TransactionPayload {
  CreateToken({required this.url, this.keyBookUrl, required this.symbol, required this.precision, this.properties, this.initialSupply, this.hasSupplyLimit, this.manager, });
  
  String url;
  String? keyBookUrl;
  String symbol;
  int precision;
  String? properties;
  BigInt? initialSupply;
  bool? hasSupplyLimit;
  String? manager;
  
  int type() {
    return TransactionType.CreateToken;
  }
  
  List<int> marshalBinary() {
    var writer = ProtocolWriter();
    writer.writeUint(1, this.type());
    writer.writeString(2, this.url);
    writer.writeString(3, this.keyBookUrl);
    writer.writeString(4, this.symbol);
    writer.writeUint(5, this.precision);
    writer.writeString(6, this.properties);
    writer.writeBigInt(7, this.initialSupply);
    writer.writeBool(8, this.hasSupplyLimit);
    writer.writeString(9, this.manager);
    return writer.msg;
  }
}

class CreateTokenAccount extends TransactionPayload {
  CreateTokenAccount({required this.url, required this.tokenUrl, this.keyBookUrl, this.scratch, this.manager, });
  
  String url;
  String tokenUrl;
  String? keyBookUrl;
  bool? scratch;
  String? manager;
  
  int type() {
    return TransactionType.CreateTokenAccount;
  }
  
  List<int> marshalBinary() {
    var writer = ProtocolWriter();
    writer.writeUint(1, this.type());
    writer.writeString(2, this.url);
    writer.writeString(3, this.tokenUrl);
    writer.writeString(4, this.keyBookUrl);
    writer.writeBool(5, this.scratch);
    writer.writeString(6, this.manager);
    return writer.msg;
  }
}

class DataEntry extends Marshallable {
  DataEntry({this.extIds, this.data, });
  
  List<String>? extIds;
  String? data;
  
  List<int> marshalBinary() {
    var writer = ProtocolWriter();
    this.extIds?.forEach((var value) => writer.writeBytes(1, value));
    writer.writeBytes(2, this.data);
    return writer.msg;
  }
}

class ED25519Signature extends Signature {
  ED25519Signature({required this.publicKey, required this.signature, });
  
  String publicKey;
  String signature;
  
  int type() {
    return SignatureType.ED25519;
  }
  
  List<int> marshalBinary() {
    var writer = ProtocolWriter();
    writer.writeUint(1, this.type());
    writer.writeBytes(2, this.publicKey);
    writer.writeBytes(3, this.signature);
    return writer.msg;
  }
}

class Envelope extends Marshallable {
  Envelope({required this.signatures, this.txHash, this.transaction, });
  
  List<Signature> signatures;
  String? txHash;
  Transaction? transaction;
  
  List<int> marshalBinary() {
    var writer = ProtocolWriter();
    this.signatures.forEach((var value) => writer.writeValue(1, value));
    writer.writeBytes(2, this.txHash);
    writer.writeValue(3, this.transaction);
    return writer.msg;
  }
}

class IssueTokens extends TransactionPayload {
  IssueTokens({required this.recipient, required this.amount, });
  
  String recipient;
  BigInt amount;
  
  int type() {
    return TransactionType.IssueTokens;
  }
  
  List<int> marshalBinary() {
    var writer = ProtocolWriter();
    writer.writeUint(1, this.type());
    writer.writeString(2, this.recipient);
    writer.writeBigInt(3, this.amount);
    return writer.msg;
  }
}

class KeySpecParams extends Marshallable {
  KeySpecParams({required this.publicKey, });
  
  String publicKey;
  
  List<int> marshalBinary() {
    var writer = ProtocolWriter();
    writer.writeBytes(1, this.publicKey);
    return writer.msg;
  }
}

class LegacyED25519Signature extends Signature {
  LegacyED25519Signature({required this.nonce, required this.publicKey, required this.signature, });
  
  int nonce;
  String publicKey;
  String signature;
  
  int type() {
    return SignatureType.LegacyED25519;
  }
  
  List<int> marshalBinary() {
    var writer = ProtocolWriter();
    writer.writeUint(1, this.type());
    writer.writeUint(2, this.nonce);
    writer.writeBytes(3, this.publicKey);
    writer.writeBytes(4, this.signature);
    return writer.msg;
  }
}

class SendTokens extends TransactionPayload {
  SendTokens({this.hash, this.meta, required this.to, });
  
  String? hash;
  String? meta;
  List<TokenRecipient> to;
  
  int type() {
    return TransactionType.SendTokens;
  }
  
  List<int> marshalBinary() {
    var writer = ProtocolWriter();
    writer.writeUint(1, this.type());
    writer.writeHash(2, this.hash);
    writer.writeBytes(3, this.meta);
    this.to.forEach((var value) => writer.writeValue(4, value));
    return writer.msg;
  }
}

class SignPending extends TransactionPayload {
  int type() {
    return TransactionType.SignPending;
  }
  
  List<int> marshalBinary() {
    var writer = ProtocolWriter();
    writer.writeUint(1, this.type());
    return writer.msg;
  }
}

class TokenRecipient extends Marshallable {
  TokenRecipient({required this.url, required this.amount, });
  
  String url;
  BigInt amount;
  
  List<int> marshalBinary() {
    var writer = ProtocolWriter();
    writer.writeString(1, this.url);
    writer.writeBigInt(2, this.amount);
    return writer.msg;
  }
}

class Transaction extends Marshallable {
  Transaction({required this.origin, required this.keyPageHeight, required this.keyPageIndex, required this.nonce, required this.body, });
  
  String origin;
  int keyPageHeight;
  int keyPageIndex;
  int nonce;
  TransactionPayload body;
  
  List<int> marshalBinary() {
    var writer = ProtocolWriter();
    writer.writeString(1, this.origin);
    writer.writeUint(2, this.keyPageHeight);
    writer.writeUint(3, this.keyPageIndex);
    writer.writeUint(4, this.nonce);
    writer.writeValue(2, this.body);
    return writer.msg;
  }
}

class TransactionHeader extends Marshallable {
  TransactionHeader({required this.origin, required this.keyPageHeight, required this.keyPageIndex, required this.nonce, });
  
  String origin;
  int keyPageHeight;
  int keyPageIndex;
  int nonce;
  
  List<int> marshalBinary() {
    var writer = ProtocolWriter();
    writer.writeString(1, this.origin);
    writer.writeUint(2, this.keyPageHeight);
    writer.writeUint(3, this.keyPageIndex);
    writer.writeUint(4, this.nonce);
    return writer.msg;
  }
}

class UpdateKeyPage extends TransactionPayload {
  UpdateKeyPage({required this.operation, this.key, this.newKey, this.owner, this.threshold, });
  
  int operation;
  String? key;
  String? newKey;
  String? owner;
  int? threshold;
  
  int type() {
    return TransactionType.UpdateKeyPage;
  }
  
  List<int> marshalBinary() {
    var writer = ProtocolWriter();
    writer.writeUint(1, this.type());
    writer.writeUint(2, this.operation);
    writer.writeBytes(3, this.key);
    writer.writeBytes(4, this.newKey);
    writer.writeString(5, this.owner);
    writer.writeUint(6, this.threshold);
    return writer.msg;
  }
}

class WriteData extends TransactionPayload {
  WriteData({required this.entry, });
  
  DataEntry entry;
  
  int type() {
    return TransactionType.WriteData;
  }
  
  List<int> marshalBinary() {
    var writer = ProtocolWriter();
    writer.writeUint(1, this.type());
    writer.writeValue(2, this.entry);
    return writer.msg;
  }
}

class WriteDataTo extends TransactionPayload {
  WriteDataTo({required this.recipient, required this.entry, });
  
  String recipient;
  DataEntry entry;
  
  int type() {
    return TransactionType.WriteDataTo;
  }
  
  List<int> marshalBinary() {
    var writer = ProtocolWriter();
    writer.writeUint(1, this.type());
    writer.writeString(2, this.recipient);
    writer.writeValue(3, this.entry);
    return writer.msg;
  }
}